"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. Проверить
работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список. Класс-исключение
должен контролировать типы данных элементов списка. Примечание: длина списка не фиксирована. Элементы запрашиваются
бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”. При этом скрипт завершается,
сформированный список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
"""


class CheckListElementError(Exception):
    def __init__(self, txt):
        self.txt = txt

    @classmethod
    def check_list_element(cls, arg: str):
        if arg.isdigit():
            return True
        else:
            raise CheckListElementError('Вы указали не число. Повторите ввод значения:')


print(
    'Укажите элементы списка: после ввода очередного элемента нажмите клавишу Enter. Для окончания ввода элементов списка напишите команду "stop"')
user_int_list = []
while True:
    next_element = input('')
    if next_element.lower() != 'stop':
        try:
            if CheckListElementError.check_list_element(next_element):
                user_int_list.append(int(next_element))
        except CheckListElementError as error_obj:
            print(error_obj.txt)
            continue
    else:
        break
print(f'Получили список: {user_int_list}')
